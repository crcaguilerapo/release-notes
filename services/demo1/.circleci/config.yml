version: 2.1
orbs:
  github-cli: circleci/github-cli@2.2.0
jobs:
  demo1-build:
    working_directory: ~/project/services/demo1
    docker:
      - image: cimg/python:3.11.5
    steps:
      - checkout

  demo1-release-notes:
    working_directory: ~/project/services/demo1
    docker:
      - image: cimg/python:3.11.5
    steps:
      - checkout
      - github-cli/setup
      - run:
          name: Set enviroment variables
          command: |
            export PACKAGE_NAME_MODULE=demo1
            export OUTPUT_FILES=out_files
      - run:
          name: Install dependencies
          command: pip install requests
      - run:
          name: Install Python Deps
          command: pip install -r services/demo1/scripts/requirements.txt
      - run:
          name: "Check PR labels"
          command: python services/demo1/scripts/check-pr-labels.py
      - run:
          name: "Detect previous version number"
          command: |
            if [[ "$RELEASE_TYPE" != "no release" ]] ; then
              python services/demo1/scripts/detect-semantic-version.py -function detect_previous_version
              PREV_VERSION=$(cat services/demo1/scripts/$OUTPUT_FILES/previous-version.txt)
              echo "export PREV_VERSION=$PREV_VERSION" >> "$BASH_ENV"
            else
              echo "$RELEASE_TYPE"
            fi
      - run:
          name: "Detect new version number"
          command: |
            if [[ "$RELEASE_TYPE" != "no release" ]] ; then
              python services/demo1/scripts/detect-semantic-version.py -function detect_new_version
              NEW_VERSION_FILE=$(cat $OUTPUT_FILES/new-version.txt)
              
              if [[ "$NEW_VERSION_FILE" == "0.0.0" ]] ; then
                echo "$PREV_VERSION" > $OUTPUT_FILES/previous-version.txt
                echo "$PREV_VERSION" > $OUTPUT_FILES/new-version.txt
                NEW_VERSION="$PREV_VERSION"
              else
                echo "$PREV_VERSION" > $OUTPUT_FILES/previous-version.txt
                echo "$NEW_VERSION_FILE" > $OUTPUT_FILES/new-version.txt
                NEW_VERSION="$NEW_VERSION_FILE"
              fi
              echo "export NEW_VERSION=$NEW_VERSION" >> "$BASH_ENV"
            else
              echo "$RELEASE_TYPE"
            fi
workflows:
  demo1:
    jobs:
      - demo1-build
      - demo1-release-notes:
          requires:
            - demo1-build
          filters:
            branches:
              only:
                - main